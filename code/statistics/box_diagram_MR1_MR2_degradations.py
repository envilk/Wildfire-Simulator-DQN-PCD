import matplotlib.pyplot as plt
import numpy as np

# Datos de ejemplo
num_datasets = 3  # Número de conjuntos de datos

# MR1

DQN_MR1 = [
    [32.84082794189453, 29.87889289855957, 31.10034942626953, 29.204153060913086, 29.58131980895996, 34.3010368347168,
     31.48097038269043, 28.71280288696289, 28.4394474029541, 31.242218017578125, 27.103805541992188, 35.89271926879883,
     26.653980255126953, 29.224912643432617, 33.22491455078125, 30.363325119018555, 30.62629508972168,
     30.100345611572266, 25.792390823364258, 35.44290542602539, 31.23529052734375, 35.91350173950195, 32.7093391418457,
     31.667818069458008, 28.64359474182129, 29.692041397094727, 31.110727310180664, 29.861587524414062,
     23.913496017456055, 31.18338966369629],
    [32.52075958251953, 31.946365356445312, 35.23183250427246, 31.916954040527344, 32.80276966094971, 35.84256553649902,
     35.73874473571777, 31.399651527404785, 34.366777420043945, 32.349477767944336, 33.41349411010742,
     31.747406005859375, 30.745676040649414, 33.1297550201416, 32.079580307006836, 31.02075958251953, 32.0553674697876,
     33.89965343475342, 29.19895839691162, 33.66608810424805, 31.795849800109863, 30.455016136169434, 33.21799278259277,
     32.19723033905029, 31.178202629089355, 31.57785129547119, 30.904841423034668, 29.538068771362305,
     31.231837272644043, 33.847747802734375],
    [33.53748448689779, 33.1407101949056, 32.968859354654946, 32.45098304748535, 31.69088617960612, 33.408302307128906,
     30.807380040486652, 33.49826431274414, 31.243366241455078, 28.57093620300293, 31.6159184773763, 32.53517723083496,
     33.08650143941244, 31.964242299397785, 32.40599568684896, 33.498270670572914, 31.359858830769856,
     32.12918217976888, 32.42214393615723, 31.851214090983074, 32.08880869547526, 33.21683883666992, 33.39676856994629,
     33.189160664876304, 33.469435373942055, 33.49365234375, 32.99653752644857, 32.820072174072266, 31.801615397135418,
     32.08996264139811]
]

# genetico_coste_data
LOW_MR1 = [
    [28.685123443603516, 26.010377883911133, 31.096881866455078, 31.584775924682617, 28.256053924560547,
     27.27682113647461, 29.51903533935547, 19.276813507080078, 31.58823013305664, 33.57786178588867, 27.820066452026367,
     22.972320556640625, 31.56401824951172, 30.335641860961914, 29.44291114807129, 32.61592102050781, 31.05190658569336,
     29.68511962890625, 28.446365356445312, 29.228368759155273, 32.723182678222656, 31.01383399963379,
     28.875431060791016, 27.4705867767334, 26.698959350585938, 27.519025802612305, 27.910032272338867,
     30.04152488708496, 28.6505184173584, 30.41176414489746],
    [29.261247634887695, 28.913496017456055, 30.892738342285156, 31.22836971282959, 29.961935997009277,
     31.43598747253418, 29.110724449157715, 32.0605525970459, 30.757784843444824, 28.425602912902832,
     30.408306121826172, 29.870240211486816, 31.489619255065918, 29.468856811523438, 28.242213249206543,
     30.159165382385254, 29.68338966369629, 31.45328140258789, 30.935978889465332, 30.51730251312256,
     31.690312385559082, 30.451557159423828, 29.56747531890869, 27.588229179382324, 31.195505142211914,
     29.941176414489746, 29.915223121643066, 30.987892150878906, 30.712801933288574, 27.202418327331543],
    [29.5028870900472, 25.979237238566082, 30.424450556437176, 28.51902961730957, 27.980390548706055, 27.21568489074707,
     31.365631103515625, 29.13725471496582, 29.704726537068684, 30.262975056966145, 27.31949297587077,
     31.464816411336262, 30.87658437093099, 30.748565038045246, 26.784313837687176, 29.201845169067383,
     29.054210027058918, 29.92502721150716, 31.132638295491535, 29.88696797688802, 29.343713760375977,
     28.123411814371746, 28.808537165323894, 28.58246676127116, 28.96424611409505, 30.167243321736652,
     29.643599192301433, 29.57208824157715, 26.641290028889973, 28.63437016805013]
]

# milp_coste_data
MEDIUM_MR1 = [
    [26.46366310119629, 20.7301025390625, 20.190305709838867, 21.813148498535156, 19.71626091003418, 23.145328521728516,
     28.366783142089844, 18.85120964050293, 21.702423095703125, 22.048437118530273, 22.131484985351562,
     21.94463348388672, 23.314878463745117, 26.622840881347656, 20.38062858581543, 27.456745147705078,
     19.871973037719727, 20.089963912963867, 23.78200340270996, 20.66436195373535, 21.439441680908203,
     21.34602165222168, 34.32180404663086, 21.519031524658203, 20.04844093322754, 23.546710968017578, 21.67820167541504,
     22.861587524414062, 19.349483489990234, 22.217998504638672],
    [23.394463539123535, 24.2595157623291, 23.262978553771973, 21.678199768066406, 24.44809627532959,
     22.574397087097168, 22.80276584625244, 25.546711921691895, 23.39100170135498, 23.591694831848145,
     21.974047660827637, 22.979239463806152, 25.55708885192871, 26.309682846069336, 25.506916999816895,
     24.557093620300293, 21.949825286865234, 22.821797370910645, 26.539790153503418, 22.60553741455078,
     24.015567779541016, 24.39619255065918, 23.013839721679688, 24.797574996948242, 26.0951566696167, 23.72664165496826,
     21.95328998565674, 22.202423095703125, 23.122838020324707, 24.268165588378906],
    [25.764705022176106, 22.688578287760418, 23.80507214864095, 22.39561589558919, 21.889271418253582,
     23.802765528361004, 22.71164894104004, 23.576700846354168, 23.468280792236328, 22.674739837646484,
     23.48904291788737, 21.261824289957683, 22.70126724243164, 22.07843017578125, 23.734720865885418,
     22.734717686971027, 22.682812372843426, 22.8638973236084, 23.583621342976887, 22.522489547729492,
     24.186847686767578, 25.36562728881836, 22.942328135172527, 23.740482330322266, 22.299884796142578,
     23.181086858113606, 23.750866572062176, 23.104957580566406, 23.922720591227215, 24.667818705240887]
]

# genetico_timespan_data
HIGH_MR1 = [
    [22.477514266967773, 18.595157623291016, 19.671279907226562, 18.993080139160156, 21.408306121826172,
     19.103801727294922, 20.98961639404297, 19.15570831298828, 20.64013671875, 19.8996524810791, 21.224910736083984,
     22.522489547729492, 22.775083541870117, 21.698959350585938, 22.2595157623291, 21.12802505493164,
     18.076128005981445, 20.871973037719727, 20.062284469604492, 19.176469802856445, 20.615917205810547,
     22.63667869567871, 22.138408660888672, 19.85812759399414, 23.242216110229492, 19.9100341796875, 20.671279907226562,
     20.737028121948242, 20.88927459716797, 20.273353576660156],
    [23.055363655090332, 23.946367263793945, 22.430794715881348, 21.702425003051758, 22.705881118774414,
     23.82006549835205, 22.4896183013916, 25.90311336517334, 22.496535301208496, 22.486160278320312, 22.237022399902344,
     22.754322052001953, 22.008649826049805, 22.31141757965088, 21.686847686767578, 20.330448150634766,
     22.228373527526855, 22.937718391418457, 22.942906379699707, 21.840831756591797, 22.605533599853516,
     23.26643657684326, 21.531137466430664, 22.480969429016113, 21.524221420288086, 20.486156463623047,
     24.392733573913574, 23.333906173706055, 21.169551849365234, 22.652247428894043],
    [20.790081024169922, 21.129180908203125, 21.463667551676433, 21.11303202311198, 19.302188873291016,
     22.77162488301595, 22.182235717773438, 21.355244954427082, 20.00115203857422, 20.642445882161457,
     20.54786554972331, 21.931950251261394, 23.527105967203777, 20.52018864949544, 21.749711990356445,
     20.900808334350586, 21.266434987386067, 22.31718571980794, 19.94925053914388, 21.351786931355793,
     19.91464678446452, 22.111880620320637, 21.537485122680664, 21.362167358398438, 21.683966318766277,
     21.756630579630535, 22.491348266601562, 21.450979232788086, 21.959630330403645, 21.55709393819173]
]

# MR2

DQN_MR2 = [
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [11.0, 24.0, 6.0, 27.0, 14.0, 6.0, 7.0, 16.0, 11.0, 8.0, 16.0, 9.0, 7.0, 8.0, 13.0, 21.0, 9.0, 26.0, 25.0, 91.0,
     7.0, 13.0, 6.0, 29.0, 9.0, 10.0, 15.0, 23.0, 21.0, 13.0],
    [35.0, 30.0, 37.0, 42.0, 31.0, 31.0, 37.0, 34.0, 30.0, 64.0, 18.0, 38.0, 30.0, 25.0, 37.0, 29.0, 69.0, 30.0, 29.0,
     31.0, 66.0, 41.0, 32.0, 30.0, 22.0, 28.0, 21.0, 22.0, 27.0, 102.0]
]

LOW_MR2 = [
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [7.0, 6.0, 8.0, 9.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 11.0, 7.0, 9.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 10.0, 6.0,
     7.0, 6.0, 10.0, 7.0, 7.0, 7.0, 9.0, 7.0],
    [30.0, 19.0, 30.0, 26.0, 28.0, 27.0, 42.0, 36.0, 29.0, 23.0, 29.0, 30.0, 30.0, 40.0, 27.0, 30.0, 27.0, 32.0,
     23.0, 39.0, 43.0, 31.0, 32.0, 34.0, 22.0, 26.0, 28.0, 20.0, 20.0, 27.0]
]

MEDIUM_MR2 = [
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [15.0, 16.0, 12.0, 22.0, 15.0, 15.0, 10.0, 14.0, 17.0, 12.0, 19.0, 14.0, 11.0, 18.0, 17.0, 9.0, 18.0, 19.0, 12.0,
     10.0, 16.0, 11.0, 12.0, 10.0, 12.0, 16.0, 6.0, 12.0, 10.0, 15.0],
    [59.0, 75.0, 43.0, 64.0, 58.0, 74.0, 58.0, 57.0, 66.0, 54.0, 65.0, 84.0, 57.0, 78.0, 62.0, 73.0, 61.0, 68.0, 39.0,
     50.0, 57.0, 38.0, 59.0, 65.0, 71.0, 51.0, 73.0, 60.0, 56.0, 47.0]
]

HIGH_MR2 = [
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [19.0, 21.0, 16.0, 8.0, 25.0, 14.0, 26.0, 16.0, 16.0, 13.0, 17.0, 28.0, 14.0, 11.0, 13.0, 14.0, 18.0, 30.0, 17.0,
     21.0, 13.0, 16.0, 25.0, 21.0, 21.0, 17.0, 20.0, 19.0, 18.0, 19.0],
    [88.0, 61.0, 116.0, 107.0, 135.0, 54.0, 69.0, 55.0, 109.0, 71.0, 75.0, 70.0, 63.0, 92.0, 66.0, 112.0, 100.0, 56.0,
     153.0, 220.0, 102.0, 57.0, 86.0, 79.0, 63.0, 71.0, 71.0, 78.0, 87.0, 85.0]
]

# Configuración del gráfico
fig, axs = plt.subplots(1, 1, figsize=(16, 8))

# Crear un segundo eje y para timespan en el lado derecho
ax2 = axs.twinx()

# Posiciones para los boxplots
positions_DQN_MR1 = np.arange(1, 3 * num_datasets * 2, step=6)
positions_LOW_MR1 = np.arange(1.5, 3 * num_datasets * 2 + 0.5, step=6)
positions_MEDIUM_MR1 = np.arange(2, 3 * num_datasets * 2 + 1, step=6)
positions_HIGH_MR1 = np.arange(2.5, 3 * num_datasets * 2 + 1.5, step=6)
positions_DQN_MR2 = np.arange(3, 3 * num_datasets * 2 + 2, step=6)
positions_LOW_MR2 = np.arange(3.5, 3 * num_datasets * 2 + 2.5, step=6)
positions_MEDIUM_MR2 = np.arange(4, 3 * num_datasets * 2 + 3, step=6)
positions_HIGH_MR2 = np.arange(4.5, 3 * num_datasets * 2 + 3.5, step=6)

# MR1
axs.set_ylabel('MR1', fontsize=24, color='tab:blue')
axs.set_ylim([15, 40])  # Ajusta el rango según tus datos

# MR2
ax2.set_ylabel('MR2', fontsize=24, color='tab:red')
ax2.set_ylim([0, 110])  # Ajusta el rango según tus datos

# Boxplots para el MR1 en el eje izquierdo
bp1_DQN_MR1 = axs.boxplot(DQN_MR1, positions=positions_DQN_MR1, labels=[f' ' for i in range(num_datasets)], widths=0.4,
                          patch_artist=True)
bp1_LOW_MR1 = axs.boxplot(LOW_MR1, positions=positions_LOW_MR1, labels=[f' ' for i in range(num_datasets)], widths=0.4,
                          patch_artist=True)
bp1_MEDIUM_MR1 = axs.boxplot(MEDIUM_MR1, positions=positions_MEDIUM_MR1, labels=[f' ' for i in range(num_datasets)],
                             widths=0.4,
                             patch_artist=True)
bp1_HIGH_MR1 = axs.boxplot(HIGH_MR1, positions=positions_HIGH_MR1, labels=[f' ' for i in range(num_datasets)],
                           widths=0.4,
                           patch_artist=True)
bp1_DQN_MR2 = ax2.boxplot(DQN_MR2, positions=positions_DQN_MR2, labels=[f' ' for i in range(num_datasets)], widths=0.4,
                          patch_artist=True)
bp1_LOW_MR2 = ax2.boxplot(LOW_MR2, positions=positions_LOW_MR2, labels=[f' ' for i in range(num_datasets)], widths=0.4,
                          patch_artist=True)
bp1_MEDIUM_MR2 = ax2.boxplot(MEDIUM_MR2, positions=positions_MEDIUM_MR2, labels=[f' ' for i in range(num_datasets)],
                             widths=0.4,
                             patch_artist=True)
bp1_HIGH_MR2 = ax2.boxplot(HIGH_MR2, positions=positions_HIGH_MR2, labels=[f' ' for i in range(num_datasets)],
                           widths=0.4,
                           patch_artist=True)

# Colorea los boxplots de coste para DQN
colors_DQN_MR1 = ['lightblue'] * num_datasets
for box, color in zip(bp1_DQN_MR1['boxes'], colors_DQN_MR1):
    box.set(color='blue', facecolor=color)

# Colorea los boxplots para LOW
colors_LOW_MR1 = ['lightblue'] * num_datasets
for box, color in zip(bp1_LOW_MR1['boxes'], colors_LOW_MR1):
    box.set(color='blue', facecolor=color)

# Colorea los boxplots para
colors_MEDIUM_MR1 = ['lightblue'] * num_datasets
for box, color in zip(bp1_MEDIUM_MR1['boxes'], colors_MEDIUM_MR1):
    box.set(color='blue', facecolor=color)

# Colorea los boxplots de coste para PCD
colors_HIGH_MR1 = ['lightblue'] * num_datasets
for box, color in zip(bp1_HIGH_MR1['boxes'], colors_HIGH_MR1):
    box.set(color='blue', facecolor=color)

# Colorea los boxplots de coste para DQN
colors_DQN_MR2 = ['lightsalmon'] * num_datasets
for box, color in zip(bp1_DQN_MR2['boxes'], colors_DQN_MR2):
    box.set(color='red', facecolor=color)

# Colorea los boxplots para LOW
colors_LOW_MR2 = ['lightsalmon'] * num_datasets
for box, color in zip(bp1_LOW_MR2['boxes'], colors_LOW_MR2):
    box.set(color='red', facecolor=color)

# Colorea los boxplots para
colors_MEDIUM_MR2 = ['lightsalmon'] * num_datasets
for box, color in zip(bp1_MEDIUM_MR2['boxes'], colors_MEDIUM_MR2):
    box.set(color='red', facecolor=color)

# Colorea los boxplots de coste para PCD
colors_HIGH_MR2 = ['lightsalmon'] * num_datasets
for box, color in zip(bp1_HIGH_MR2['boxes'], colors_HIGH_MR2):
    box.set(color='red', facecolor=color)

for i in range(0, 15, 6):
    ax2.text(i + 1, -4, 'D', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 1.5, -4, 'L', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 2, -4, 'M', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 2.5, -4, 'H', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 3, -4, 'D', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 3.5, -4, 'L', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 4, -4, 'M', ha='center', va='center', fontsize=18, color='black')
    ax2.text(i + 4.5, -4, 'H', ha='center', va='center', fontsize=18, color='black')

for i in range(0, 20, 6):
    if i == 0:
        ax2.text(i + 2.5, -9, '1 UAV', ha='center', va='center', fontsize=22, color='black')
    elif i == 6:
        ax2.text(i + 2.5, -9, '2 UAV', ha='center', va='center', fontsize=22, color='black')
    elif i == 12:
        ax2.text(i + 2.5, -9, '3 UAV', ha='center', va='center', fontsize=22, color='black')

# Añadir título superior
title = 'NormalConditions-degradations'
# plt.suptitle(title, fontsize=20, y=0.92)

# Ajusta el tamaño de las etiquetas de los ejes
axs.tick_params(axis='both', labelsize=18)
ax2.tick_params(axis='both', labelsize=18)

plt.savefig(title + '.pdf', format='pdf')
plt.show()
